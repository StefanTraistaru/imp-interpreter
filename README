[335CB] Traistaru Stefan - Tema LFA


Fisiere:    - tema.flex
            - Main.java
            - types.java

    Main.java:
- Contine un HashMap in care retin valorile variabilelor din program
- Creez si apelez lexerul;
- Creez si scriu in fisierele de iesire;
- Mai contine de asemenea o metoda prin care se adauga "\t" pentru fii Nodurilor din arbore. Aceasta functie am luat-o din exemplul vostru de laborator.

    types.java:
- Contine o interfata "Expression" si clase pentru toate tipurile de noduri ce pot face parte din arbore;
- Toate clasele implementeaza interfata Expression;
- Metoda show este apelata pentru a afisa arborele
- Metoda interpret este apelata pentru a interpreta programul si pentru a afla valorile variabilelor;

    tema.flex:
Declaratii:
- o stiva pentru noduri din arbore, o stiva pentru nivelele de precedenta ale operatiilor si o lista cu variabile.
Metode:
- get_nth_element_from_stack: intoarce al n-lea element de pe stiva; Am luat-o din exemplul de laborator.
- pop_second: va elimina al doilea element din stiva de precedente.
- check_declaration: va intoarce adevarat daca simbolul ";" este cel din declaratia din inceputul programului ("int a;").
- add_sequence_node: va adauga corespunzator un nod primit ca parametru intr-un nod de tip SequenceNode.
- add_in_place: va aduga un nod primit ca parametru pe stiva in functie de natura acestuia.
- evaluate_before: va evalua toata stiva pana la "=", "(" sau pana la o operatie de precedenta mai mare si va construi noduri corespunzator.
- evaluate_sign: in functie de simbol(adica de operatie) si de valoarea de precedenta va decide daca este nevoie sa evalueze stiva inainte de a adauga noul simbol pe stiva.
Reguli:
- am incercat pe cat posibil ca regulile sa fie scurte pentru a fi usor de parcurs.
- astfel fie voi adauga direct un nod pe stiva, fie ma voi folosi de metode pentru a face asta.
